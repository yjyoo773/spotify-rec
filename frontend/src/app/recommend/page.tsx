"use client";
import { useMemo, useState } from "react";
import { useQuery, useMutation } from "@tanstack/react-query";
import { api } from "@/lib/api";
import TrackCard from "@/components/TrackCard";
import type { RecommendRequest } from "@/types/api";

function useQueryParam(name: string) {
  const value = useMemo(() => new URLSearchParams(window.location.search).get(name), []);
  return value;
}

export default function RecommendPage() {
  const seedsParam = useQueryParam("seeds") || "";
  const initialSeeds = seedsParam.split(",").filter(Boolean);

  const [limit, setLimit] = useState(25);
  const [yearMin, setYearMin] = useState<number | undefined>(undefined);
  const [yearMax, setYearMax] = useState<number | undefined>(undefined);
  const [popBucket, setPopBucket] = useState<number | undefined>(undefined);
  const [diversity, setDiversity] = useState(true);
  const [playlistName, setPlaylistName] = useState("My smart playlist");

  const payload: RecommendRequest = {
    seeds: { trackIds: initialSeeds },
    filters: {
      limit,
      year_min: yearMin,
      year_max: yearMax,
      popularity_bucket: popBucket,
      artist_diversity: diversity,
    },
  };

  const { data, isFetching, refetch } = useQuery({
    queryKey: ["recommend", payload],
    queryFn: () => api.recommend(payload),
  });

  const createPlaylist = useMutation({
    mutationFn: (trackIds: string[]) => api.createPlaylist(playlistName, trackIds, "Generated by Spotify Recs"),
    onSuccess: (res) => {
      if (res.url) window.open(res.url, "_blank");
      alert(`Created playlist: ${res.playlistId}`);
    },
  });

  const tracks = data?.items?.map((i) => i.track) ?? [];
  const meta = data?.meta;

  return (
    <main className="mx-auto max-w-5xl p-6 space-y-6">
      <header className="space-y-1">
        <h1 className="text-2xl font-semibold">Recommendations</h1>
        {meta && (
          <div className="text-xs text-gray-500">
            Latency: {meta.latency_ms ?? "—"} ms • Cache: {meta.cache ?? "—"}
          </div>
        )}
      </header>

      <section className="rounded-2xl border bg-white p-4 shadow-sm">
        <div className="grid grid-cols-2 gap-3 md:grid-cols-6">
          <div className="col-span-2">
            <label className="text-sm text-gray-600">Limit</label>
            <input type="number" value={limit} onChange={(e) => setLimit(+e.target.value)} className="w-full rounded-lg border px-2 py-1" />
          </div>
          <div>
            <label className="text-sm text-gray-600">Year min</label>
            <input type="number" value={yearMin ?? ""} onChange={(e) => setYearMin(e.target.value ? +e.target.value : undefined)} className="w-full rounded-lg border px-2 py-1" />
          </div>
          <div>
            <label className="text-sm text-gray-600">Year max</label>
            <input type="number" value={yearMax ?? ""} onChange={(e) => setYearMax(e.target.value ? +e.target.value : undefined)} className="w-full rounded-lg border px-2 py-1" />
          </div>
          <div>
            <label className="text-sm text-gray-600">Popularity bucket</label>
            <input type="number" value={popBucket ?? ""} onChange={(e) => setPopBucket(e.target.value ? +e.target.value : undefined)} className="w-full rounded-lg border px-2 py-1" />
          </div>
          <label className="flex items-center gap-2">
            <input type="checkbox" checked={diversity} onChange={(e) => setDiversity(e.target.checked)} />
            Artist diversity
          </label>
        </div>
        <div className="mt-3">
          <button onClick={() => refetch()} className="rounded-xl bg-emerald-600 px-4 py-2 text-white">
            Refresh recommendations
          </button>
        </div>
      </section>

      {isFetching && <div className="text-sm text-gray-500">Generating…</div>}

      <div className="grid grid-cols-1 gap-3">
        {tracks.map((t) => (
          <TrackCard key={t.id} track={t} />
        ))}
      </div>

      <section className="flex items-end justify-between gap-3">
        <div className="flex-1">
          <label className="text-sm text-gray-600">Playlist name</label>
          <input value={playlistName} onChange={(e) => setPlaylistName(e.target.value)} className="mt-1 w-full rounded-xl border px-3 py-2" />
        </div>
        <button
          onClick={() => createPlaylist.mutate(tracks.map((t) => t.id))}
          disabled={!tracks.length || createPlaylist.isPending}
          className="rounded-xl bg-black px-4 py-2 text-white disabled:opacity-50"
        >
          {createPlaylist.isPending ? "Creating…" : `Create playlist (${tracks.length})`}
        </button>
      </section>
    </main>
  );
}